#!/bin/bash
# based on https://github.com/jdevera/dotfiles/blob/master/install

post_install_actions()
{
    true
}

pre_install_actions()
{
    ensure_generated_template_files_are_ignored
    generate_template_files
}

template_files()
{
    ls ../lib/DOT*.template
}

dot_files()
{
    ls -d ../lib/DOT* | grep -v "\.template$"
}

ensure_generated_template_files_are_ignored()
{
    local gitignore="../.gitignore"

    for template_file in `template_files`
    do
	# http://tldp.org/LDP/abs/html/string-manipulation.html
	local file=${template_file#..} # remove "^\.\."
	file=${file%\.template}        # remove "\.template$"

	if ! `grep -lq "^$file$" $gitignore`
	then
	    echo "You need to gitignore $file!"
	    exit 1
	fi
    done
}

generate_template_files()
{
    for template_file in `template_files`
    do
        local target=${template_file%\.template}

	if [[ -e $target ]]
	then
	    # TODO tie into `replace_all` regime
	    echo "[generate_template_files] $target exists (skipping)"
        else
	    echo "[generate_template_files] generating $target"
	    bash "$template_file" > "$target"
	fi
    done
}

lib_dir()
{
    ( cd "$(dirname "$0")" && pwd ) | sed 's_install$_lib_'
}

# Install the dot files into user's home directory
install_home()
{
    pre_install_actions

    replace_all=false
    local dest_dir="$HOME/staging"
    [[ ! -d $dest_dir ]] && { echo "create $dest_dir; exiting"; exit 1; }

    local file
    for file in `dot_files`
    do
	local base_name=`basename $file`
	local dest_file_name=$(echo $base_name | sed 's/^DOT/./')
        local dest_file_path="$dest_dir/$dest_file_name"
	local src_file_path="`lib_dir`/$base_name"
	echo "====> $dest_file_path"
	# set up for ln -s $src_file_path $dest_file_path
        install_file "$src_file_path" "$dest_file_path"
    done

    post_install_actions
}

# Install a file (with replacement confirmation)
install_file()
{
    local file="$1"           # the SRC (or target)
    local dest_file_path="$2" # the LINK

    if [[ -e $dest_file_path ]]
    then
        if diff -q "$file" "$dest_file_path" > /dev/null
        then
            echo "identical $dest_file_path"
        elif $replace_all
        then
            replace_file "$file" "$dest_file_path"
        else
            read -p "overwrite ${dest_file_path}? [ynaq] "
            case $REPLY in
                'y') replace_file "$file" "$dest_file_path" ;;
                'q') exit 1 ;;
                'a') replace_all=true
                     replace_file "$file" "$dest_file_path" ;;
                *)   echo "skipping $dest_file_path" ;;
            esac
        fi
    else
        link_file "$file" "$dest_file_path"
    fi
}

# replace file ARG2 with link to ARG1
replace_file()
{
    local file="$1"
    local dest_file_path="$2"

    remove "$dest_file_path"
    link_file "$file" "$dest_file_path"
}

# args are in ln order: link_file <REAL/SRC/TARGET> <LINK>
link_file()
{
    local file="$1"
    local dest_file_path="$2"

    echo "linking $dest_file_path"
    #echo "ln -s \"$file\" \"$dest_file_path\""
    ln -s "$file" "$dest_file_path"
}

#element_exists()
#{
#    local elem="$1"
#    shift
#    local arr=( "$@" )
#    local i
#
#    for i in ${arr[@]}
#    do
#        if [[ $i == $elem ]]
#        then
#            return 0  # true
#        fi
#    done
#    return 1  # false
#}

remove()
{
    local file="$1"

    # Don't recursively remove symbolic links to directories,
    # just real directories.  (This is, unfortunately, highly
    # dependent on whether $file has a trailing slash.  If it
    # doesn't have a trailing slash `rm -rf` is fine.  If it
    # does have a trailing slash, `rm -rf` will empty out the
    # directory the link points to, remove the directory (the
    # real one), but will leave the link.  Huh.)
    if [[ -d $file ]] && [[ ! -h $file ]]
    then
	#echo "DIR BUT NOT A LINK: rm -rf \"$file\""
        rm -rf "$file"
    else
	#echo "IT'S A LINK OR A FILE: rm -f \"$file\""
        rm -f "$file"
    fi
}

#has_program()
#{
#    type -t "$1" > /dev/null
#}

# Install all configuration files
install_home
