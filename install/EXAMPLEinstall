#!/bin/bash
# based on https://github.com/jdevera/dotfiles/blob/master/install

post_install_actions()
{
    true
}

pre_install_actions()
{
    ensure_generated_template_files_are_ignored
    generate_template_files
}

template_files()
{
    ls ../lib/DOT*.template
}

dot_files()
{
    ls -d ../lib/DOT* | grep -v "\.template$"
}

ensure_generated_template_files_are_ignored()
{
    local gitignore="../.gitignore"

    for template_file in `template_files`
    do
	# http://tldp.org/LDP/abs/html/string-manipulation.html
	local file=${template_file#..} # remove "^\.\."
	file=${file%\.template}        # remove "\.template$"

	if ! `grep -lq "^$file$" $gitignore`
	then
	    echo "You need to gitignore $file!"
	    exit 1
	fi
    done
}

generate_template_files()
{
    for template_file in `template_files`
    do
        local target=${template_file%\.template}

	if [[ -e $target ]]
	then
	    # TODO tie into `replace_all` regime
	    echo "[generate_template_files] $target exists (skipping)"
        else
	    echo "[generate_template_files] generating $target"
	    bash "$template_file" > "$target"
	fi
    done
}

lib_dir()
{
    ( cd "$(dirname "$0")" && pwd ) | sed 's_install$_lib_'
}

# Install the dot files into user's home directory
install_home()
{
    pre_install_actions

    local dest_dir="$HOME/staging"
    [[ ! -d $dest_dir ]] && { echo "create $dest_dir; exiting"; exit 1; }

    replace_all=false

    local file
    for file in `dot_files`
    do
	local base_name=`basename $file`
	local dest_file_name=$(echo $base_name | sed 's/^DOT/./')
        local dest_file_path="$dest_dir/$dest_file_name"
	local src_file_path="`lib_dir`/$base_name"
	# set up for ln -s $src_file_path $dest_file_path
	#echo $base_name
	#echo $src_file_path
	#echo $dest_file_path
	#echo "----------------"
        install_file "$src_file_path" "$dest_file_path"
    done
#
#    post_install_actions
}

# Install a file (with replacement confirmation)
install_file()
{
    local file="$1"
    local dest_file_path="$2"

    echo "LINK will be: $dest_file_path"
    echo "SRC will be:  $file"

#    if [[ -e $dest_file_path ]] || \
#       [[ -L $dest_file_path ]]		  # Can be a broken symlink
#    then
#        if [[ -e $dest_file_path ]] &&
#           diff -q "$file" "$dest_file_path" > /dev/null
#        then
#            echo "identical $dest_file_path"
#        elif $replace_all
#        then
#            replace_file "$file" "$dest_file_path"
#        else
#            read -p "overwrite ${dest_file_path}? [ynaq] "
#            case $REPLY in
#                'y') replace_file "$file" "$dest_file_path" ;;
#                'q') exit 1 ;;
#                'a') replace_all=true
#                     replace_file "$file" "$dest_file_path" ;;
#                *)   echo "skipping $dest_file_path" ;;
#            esac
#        fi
#    else
#        link_file "$file" "$dest_file_path"
#    fi
}

#replace_file()
#{
#    local file="$1"
#    local dest_file_path="$2"
#
#    remove "$dest_file_path"
#    link_file "$file" "$dest_file_path"
#}

#link_file()
#{
#    local file="$1"
#    local dest_file_path="$2"
#
#    if [[ $file =~ \.template$ ]]
#    then
#        echo "generating $dest_file_path"
#        bash "$file" > "$dest_file_path"
#    else
#        echo "linking $dest_file_path"
#        ln -s "`pwd`/$file" "$dest_file_path"
#    fi
#}

#element_exists()
#{
#    local elem="$1"
#    shift
#    local arr=( "$@" )
#    local i
#
#    for i in ${arr[@]}
#    do
#        if [[ $i == $elem ]]
#        then
#            return 0  # true
#        fi
#    done
#    return 1  # false
#}

#remove()
#{
#    local file="$1"
#
#    # Don't recursively remove symbolic links to directories,
#    # just real directories.
#    if [[ -d $file ]] && [[ ! -h $file ]]
#    then
#        rm -rf "$file"
#    else
#        rm -f "$file"
#    fi
#}

#has_program()
#{
#    type -t "$1" > /dev/null
#}

# Install all configuration files
install_home
